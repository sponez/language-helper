name: build

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      PKG_NAME: app
      BIN_NAME: app
      PROFILE: release

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      # ---------- macOS ----------
      - name: Add macOS targets
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin x86_64-apple-darwin

      - name: Build (macOS aarch64)
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --${{ env.PROFILE }} \
            --manifest-path Cargo.toml \
            -p ${{ env.PKG_NAME }} \
            --bin ${{ env.BIN_NAME }} \
            --target aarch64-apple-darwin

      - name: Build (macOS x86_64)
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --${{ env.PROFILE }} \
            --manifest-path Cargo.toml \
            -p ${{ env.PKG_NAME }} \
            --bin ${{ env.BIN_NAME }} \
            --target x86_64-apple-darwin

      - name: Create universal binary
        if: matrix.os == 'macos-latest'
        run: |
          set -e
          mkdir -p dist
          A=target/aarch64-apple-darwin/${{ env.PROFILE }}/${{ env.BIN_NAME }}
          B=target/x86_64-apple-darwin/${{ env.PROFILE }}/${{ env.BIN_NAME }}
          test -f "$A" && test -f "$B"
          lipo -create "$A" "$B" -output "dist/${{ env.BIN_NAME }}-universal"
          file "dist/${{ env.BIN_NAME }}-universal"
          lipo -info "dist/${{ env.BIN_NAME }}-universal"

      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: dist/*

      # ---------- Windows ----------
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cargo build --release `
            -p $env:PKG_NAME `
            --bin $env:BIN_NAME

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item "target\release\$env:BIN_NAME.exe" "dist\"
          Compress-Archive -Path dist\* -DestinationPath dist\windows-release.zip -Force

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dist/*
